services:
  # 后端服务
  zyznt:
    build:
      context: .
      dockerfile: Dockerfile.backend
    image: zyznt:latest
    ports:
      - "8000:8000"
    volumes:
      - ./log:/project/log
      - ./file:/project/file
      - ./file/conf.txt:/project/file/conf.txt
    working_dir: /project/backend
    environment:
      - PYTHONPATH=/project/backend
    depends_on:
      - mariadb
      - redis
      - milvus-standalone
    networks:
      - app-network
    restart: unless-stopped

  # 前端服务
  zyznt-web:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    image: zyznt-web:latest
    ports:
      - "80:80"
    depends_on:
      - zyznt  # 修改为 zyznt（后端服务的实际名称）
    networks:
      - app-network
    restart: unless-stopped

  # MariaDB 数据库
  mariadb:
    image: mariadb:11
    environment:
      MYSQL_ROOT_PASSWORD: zyznt
      MYSQL_DATABASE: zyai
    volumes:
      - ./db/mysql:/var/lib/mysql
    networks:
      - app-network
    restart: unless-stopped

  # Redis 带 ReJSON 模块
  redis:
    image: redislabs/rejson:latest
    command: redis-server --requirepass zyznt --loadmodule /usr/lib/redis/modules/rejson.so
    volumes:
      - ./db/redis:/data
    networks:
      - app-network
    restart: unless-stopped

  # Milvus 向量数据库组件 - Etcd
  milvus-etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.18
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ./db/milvus/volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://milvus-etcd:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - app-network
    restart: unless-stopped

  # Milvus 向量数据库组件 - Minio
  milvus-minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2024-12-18T13-15-44Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - ./db/milvus/volumes/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - app-network
    restart: unless-stopped

  # Milvus 向量数据库主服务
  milvus-standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.6.0
    command: ["milvus", "run", "standalone"]
    security_opt:
      - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: milvus-etcd:2379
      MINIO_ADDRESS: milvus-minio:9000
      MQ_TYPE: woodpecker
    volumes:
      - ./db/milvus/volumes/milvus:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"  # Milvus服务端口
      - "9091:9091"    # Milvus监控端口
    depends_on:
      - "milvus-etcd"
      - "milvus-minio"
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge